#ifndef MYIMU_DMP_H_INCLUDED
#define MYIMU_DMP_H_INCLUDED

#include "myMPU6050.h"

#define MPU6050_DMP_CODE_SIZE       1929    // dmpMemory[]
#if UseGyroFiFo==1
    #if UseAcceleroFiFo==1
        #define MPU6050_DMP_CONFIG_SIZE     111+14
        #define JumlahFiFo                  40  //  16+12+12 data   (quaternion + Gyroscope + Accelero)
    #else
        #define MPU6050_DMP_CONFIG_SIZE     111+7
        #define JumlahFiFo                  28  //  16+12 data      (quaternion + Gyroscope)
    #endif // UseAcceleroFiFo
#else
    #if UseAcceleroFiFo==1
        #define MPU6050_DMP_CONFIG_SIZE     111+7
        #define JumlahFiFo                  28  //  16+12 data  (quaternion + accelerometer)
    #else
        #define MPU6050_DMP_CONFIG_SIZE     111
        #define JumlahFiFo                  16  //  16 data     (quaternion)
    #endif // UseAcceleroFiFo
#endif // UseAcceleroFiFo

#define MPU6050_DMP_UPDATES_SIZE    47      // dmpUpdates[]
#define DMP_INIT_DEBUG              0       // menampilkan proses inisialisasi ke LCD

/* ================================================================================================ *
 | 18-byte FIFO packet structure:                                                                   |
 |                                                                                                  |
 | [QUAT W][      ][QUAT X][      ][QUAT Y][      ][QUAT Z][      ][FOOTER]                         |
 |   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17                          |
 |                                                                                                  |
 |                                                                                                  |
 | 30-byte FIFO packet structure:                                                                   |
 |                                                                                                  |
 | [QUAT W][      ][QUAT X][      ][QUAT Y][      ][QUAT Z][      ][Gyro/Accel X  ]                 |
 |   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19                  |          |
 |  [Gyro/Accel Y  ][Gyro/Accel Z  ][Footer]                                                        |
 |   20  21  22  23  24  25  26  27  88  29                                                         |
 * ================================================================================================ */

// this block of memory gets written to the MPU on start-up, and it seems
// to be volatile memory, so it has to be done each time (it only takes ~1
// second though)
const unsigned char dmpMemory[MPU6050_DMP_CODE_SIZE] PROGMEM = {
    // bank 0, 256 bytes
    0xFB, 0x00, 0x00, 0x3E, 0x00, 0x0B, 0x00, 0x36, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,
    0x00, 0x65, 0x00, 0x54, 0xFF, 0xEF, 0x00, 0x00, 0xFA, 0x80, 0x00, 0x0B, 0x12, 0x82, 0x00, 0x01,
    0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x28, 0x00, 0x00, 0xFF, 0xFF, 0x45, 0x81, 0xFF, 0xFF, 0xFA, 0x72, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x7F, 0xFF, 0xFF, 0xFE, 0x80, 0x01,
    0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x3E, 0x03, 0x30, 0x40, 0x00, 0x00, 0x00, 0x02, 0xCA, 0xE3, 0x09, 0x3E, 0x80, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
    0x41, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x2A, 0x00, 0x00, 0x16, 0x55, 0x00, 0x00, 0x21, 0x82,
    0xFD, 0x87, 0x26, 0x50, 0xFD, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x05, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6F, 0x00, 0x02, 0x65, 0x32, 0x00, 0x00, 0x5E, 0xC0,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFB, 0x8C, 0x6F, 0x5D, 0xFD, 0x5D, 0x08, 0xD9, 0x00, 0x7C, 0x73, 0x3B, 0x00, 0x6C, 0x12, 0xCC,
    0x32, 0x00, 0x13, 0x9D, 0x32, 0x00, 0xD0, 0xD6, 0x32, 0x00, 0x08, 0x00, 0x40, 0x00, 0x01, 0xF4,
    0xFF, 0xE6, 0x80, 0x79, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xD6, 0x00, 0x00, 0x27, 0x10,

    // bank 1, 256 bytes
    0xFB, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFA, 0x36, 0xFF, 0xBC, 0x30, 0x8E, 0x00, 0x05, 0xFB, 0xF0, 0xFF, 0xD9, 0x5B, 0xC8,
    0xFF, 0xD0, 0x9A, 0xBE, 0x00, 0x00, 0x10, 0xA9, 0xFF, 0xF4, 0x1E, 0xB2, 0x00, 0xCE, 0xBB, 0xF7,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x0C,
    0xFF, 0xC2, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xCF, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x14,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x3F, 0x68, 0xB6, 0x79, 0x35, 0x28, 0xBC, 0xC6, 0x7E, 0xD1, 0x6C,
    0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x6A, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x25, 0x4D, 0x00, 0x2F, 0x70, 0x6D, 0x00, 0x00, 0x05, 0xAE, 0x00, 0x0C, 0x02, 0xD0,

    // bank 2, 256 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x54, 0xFF, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0xFF, 0xEF, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // bank 3, 256 bytes
    0xD8, 0xDC, 0xBA, 0xA2, 0xF1, 0xDE, 0xB2, 0xB8, 0xB4, 0xA8, 0x81, 0x91, 0xF7, 0x4A, 0x90, 0x7F,
    0x91, 0x6A, 0xF3, 0xF9, 0xDB, 0xA8, 0xF9, 0xB0, 0xBA, 0xA0, 0x80, 0xF2, 0xCE, 0x81, 0xF3, 0xC2,
    0xF1, 0xC1, 0xF2, 0xC3, 0xF3, 0xCC, 0xA2, 0xB2, 0x80, 0xF1, 0xC6, 0xD8, 0x80, 0xBA, 0xA7, 0xDF,
    0xDF, 0xDF, 0xF2, 0xA7, 0xC3, 0xCB, 0xC5, 0xB6, 0xF0, 0x87, 0xA2, 0x94, 0x24, 0x48, 0x70, 0x3C,
    0x95, 0x40, 0x68, 0x34, 0x58, 0x9B, 0x78, 0xA2, 0xF1, 0x83, 0x92, 0x2D, 0x55, 0x7D, 0xD8, 0xB1,
    0xB4, 0xB8, 0xA1, 0xD0, 0x91, 0x80, 0xF2, 0x70, 0xF3, 0x70, 0xF2, 0x7C, 0x80, 0xA8, 0xF1, 0x01,
    0xB0, 0x98, 0x87, 0xD9, 0x43, 0xD8, 0x86, 0xC9, 0x88, 0xBA, 0xA1, 0xF2, 0x0E, 0xB8, 0x97, 0x80,
    0xF1, 0xA9, 0xDF, 0xDF, 0xDF, 0xAA, 0xDF, 0xDF, 0xDF, 0xF2, 0xAA, 0xC5, 0xCD, 0xC7, 0xA9, 0x0C,
    0xC9, 0x2C, 0x97, 0x97, 0x97, 0x97, 0xF1, 0xA9, 0x89, 0x26, 0x46, 0x66, 0xB0, 0xB4, 0xBA, 0x80,
    0xAC, 0xDE, 0xF2, 0xCA, 0xF1, 0xB2, 0x8C, 0x02, 0xA9, 0xB6, 0x98, 0x00, 0x89, 0x0E, 0x16, 0x1E,
    0xB8, 0xA9, 0xB4, 0x99, 0x2C, 0x54, 0x7C, 0xB0, 0x8A, 0xA8, 0x96, 0x36, 0x56, 0x76, 0xF1, 0xB9,
    0xAF, 0xB4, 0xB0, 0x83, 0xC0, 0xB8, 0xA8, 0x97, 0x11, 0xB1, 0x8F, 0x98, 0xB9, 0xAF, 0xF0, 0x24,
    0x08, 0x44, 0x10, 0x64, 0x18, 0xF1, 0xA3, 0x29, 0x55, 0x7D, 0xAF, 0x83, 0xB5, 0x93, 0xAF, 0xF0,
    0x00, 0x28, 0x50, 0xF1, 0xA3, 0x86, 0x9F, 0x61, 0xA6, 0xDA, 0xDE, 0xDF, 0xD9, 0xFA, 0xA3, 0x86,
    0x96, 0xDB, 0x31, 0xA6, 0xD9, 0xF8, 0xDF, 0xBA, 0xA6, 0x8F, 0xC2, 0xC5, 0xC7, 0xB2, 0x8C, 0xC1,
    0xB8, 0xA2, 0xDF, 0xDF, 0xDF, 0xA3, 0xDF, 0xDF, 0xDF, 0xD8, 0xD8, 0xF1, 0xB8, 0xA8, 0xB2, 0x86,

    // bank 4, 256 bytes
    0xB4, 0x98, 0x0D, 0x35, 0x5D, 0xB8, 0xAA, 0x98, 0xB0, 0x87, 0x2D, 0x35, 0x3D, 0xB2, 0xB6, 0xBA,
    0xAF, 0x8C, 0x96, 0x19, 0x8F, 0x9F, 0xA7, 0x0E, 0x16, 0x1E, 0xB4, 0x9A, 0xB8, 0xAA, 0x87, 0x2C,
    0x54, 0x7C, 0xB9, 0xA3, 0xDE, 0xDF, 0xDF, 0xA3, 0xB1, 0x80, 0xF2, 0xC4, 0xCD, 0xC9, 0xF1, 0xB8,
    0xA9, 0xB4, 0x99, 0x83, 0x0D, 0x35, 0x5D, 0x89, 0xB9, 0xA3, 0x2D, 0x55, 0x7D, 0xB5, 0x93, 0xA3,
    0x0E, 0x16, 0x1E, 0xA9, 0x2C, 0x54, 0x7C, 0xB8, 0xB4, 0xB0, 0xF1, 0x97, 0x83, 0xA8, 0x11, 0x84,
    0xA5, 0x09, 0x98, 0xA3, 0x83, 0xF0, 0xDA, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xD8, 0xF1, 0xA5,
    0x29, 0x55, 0x7D, 0xA5, 0x85, 0x95, 0x02, 0x1A, 0x2E, 0x3A, 0x56, 0x5A, 0x40, 0x48, 0xF9, 0xF3,
    0xA3, 0xD9, 0xF8, 0xF0, 0x98, 0x83, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0x97, 0x82, 0xA8, 0xF1,
    0x11, 0xF0, 0x98, 0xA2, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xDA, 0xF3, 0xDE, 0xD8, 0x83, 0xA5,
    0x94, 0x01, 0xD9, 0xA3, 0x02, 0xF1, 0xA2, 0xC3, 0xC5, 0xC7, 0xD8, 0xF1, 0x84, 0x92, 0xA2, 0x4D,
    0xDA, 0x2A, 0xD8, 0x48, 0x69, 0xD9, 0x2A, 0xD8, 0x68, 0x55, 0xDA, 0x32, 0xD8, 0x50, 0x71, 0xD9,
    0x32, 0xD8, 0x70, 0x5D, 0xDA, 0x3A, 0xD8, 0x58, 0x79, 0xD9, 0x3A, 0xD8, 0x78, 0x93, 0xA3, 0x4D,
    0xDA, 0x2A, 0xD8, 0x48, 0x69, 0xD9, 0x2A, 0xD8, 0x68, 0x55, 0xDA, 0x32, 0xD8, 0x50, 0x71, 0xD9,
    0x32, 0xD8, 0x70, 0x5D, 0xDA, 0x3A, 0xD8, 0x58, 0x79, 0xD9, 0x3A, 0xD8, 0x78, 0xA8, 0x8A, 0x9A,
    0xF0, 0x28, 0x50, 0x78, 0x9E, 0xF3, 0x88, 0x18, 0xF1, 0x9F, 0x1D, 0x98, 0xA8, 0xD9, 0x08, 0xD8,
    0xC8, 0x9F, 0x12, 0x9E, 0xF3, 0x15, 0xA8, 0xDA, 0x12, 0x10, 0xD8, 0xF1, 0xAF, 0xC8, 0x97, 0x87,

    // bank 5, 256 bytes
    0x34, 0xB5, 0xB9, 0x94, 0xA4, 0x21, 0xF3, 0xD9, 0x22, 0xD8, 0xF2, 0x2D, 0xF3, 0xD9, 0x2A, 0xD8,
    0xF2, 0x35, 0xF3, 0xD9, 0x32, 0xD8, 0x81, 0xA4, 0x60, 0x60, 0x61, 0xD9, 0x61, 0xD8, 0x6C, 0x68,
    0x69, 0xD9, 0x69, 0xD8, 0x74, 0x70, 0x71, 0xD9, 0x71, 0xD8, 0xB1, 0xA3, 0x84, 0x19, 0x3D, 0x5D,
    0xA3, 0x83, 0x1A, 0x3E, 0x5E, 0x93, 0x10, 0x30, 0x81, 0x10, 0x11, 0xB8, 0xB0, 0xAF, 0x8F, 0x94,
    0xF2, 0xDA, 0x3E, 0xD8, 0xB4, 0x9A, 0xA8, 0x87, 0x29, 0xDA, 0xF8, 0xD8, 0x87, 0x9A, 0x35, 0xDA,
    0xF8, 0xD8, 0x87, 0x9A, 0x3D, 0xDA, 0xF8, 0xD8, 0xB1, 0xB9, 0xA4, 0x98, 0x85, 0x02, 0x2E, 0x56,
    0xA5, 0x81, 0x00, 0x0C, 0x14, 0xA3, 0x97, 0xB0, 0x8A, 0xF1, 0x2D, 0xD9, 0x28, 0xD8, 0x4D, 0xD9,
    0x48, 0xD8, 0x6D, 0xD9, 0x68, 0xD8, 0xB1, 0x84, 0x0D, 0xDA, 0x0E, 0xD8, 0xA3, 0x29, 0x83, 0xDA,
    0x2C, 0x0E, 0xD8, 0xA3, 0x84, 0x49, 0x83, 0xDA, 0x2C, 0x4C, 0x0E, 0xD8, 0xB8, 0xB0, 0xA8, 0x8A,
    0x9A, 0xF5, 0x20, 0xAA, 0xDA, 0xDF, 0xD8, 0xA8, 0x40, 0xAA, 0xD0, 0xDA, 0xDE, 0xD8, 0xA8, 0x60,
    0xAA, 0xDA, 0xD0, 0xDF, 0xD8, 0xF1, 0x97, 0x86, 0xA8, 0x31, 0x9B, 0x06, 0x99, 0x07, 0xAB, 0x97,
    0x28, 0x88, 0x9B, 0xF0, 0x0C, 0x20, 0x14, 0x40, 0xB8, 0xB0, 0xB4, 0xA8, 0x8C, 0x9C, 0xF0, 0x04,
    0x28, 0x51, 0x79, 0x1D, 0x30, 0x14, 0x38, 0xB2, 0x82, 0xAB, 0xD0, 0x98, 0x2C, 0x50, 0x50, 0x78,
    0x78, 0x9B, 0xF1, 0x1A, 0xB0, 0xF0, 0x8A, 0x9C, 0xA8, 0x29, 0x51, 0x79, 0x8B, 0x29, 0x51, 0x79,
    0x8A, 0x24, 0x70, 0x59, 0x8B, 0x20, 0x58, 0x71, 0x8A, 0x44, 0x69, 0x38, 0x8B, 0x39, 0x40, 0x68,
    0x8A, 0x64, 0x48, 0x31, 0x8B, 0x30, 0x49, 0x60, 0xA5, 0x88, 0x20, 0x09, 0x71, 0x58, 0x44, 0x68,

    // bank 6, 256 bytes
    0x11, 0x39, 0x64, 0x49, 0x30, 0x19, 0xF1, 0xAC, 0x00, 0x2C, 0x54, 0x7C, 0xF0, 0x8C, 0xA8, 0x04,
    0x28, 0x50, 0x78, 0xF1, 0x88, 0x97, 0x26, 0xA8, 0x59, 0x98, 0xAC, 0x8C, 0x02, 0x26, 0x46, 0x66,
    0xF0, 0x89, 0x9C, 0xA8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31,
    0xA9, 0x88, 0x09, 0x20, 0x59, 0x70, 0xAB, 0x11, 0x38, 0x40, 0x69, 0xA8, 0x19, 0x31, 0x48, 0x60,
    0x8C, 0xA8, 0x3C, 0x41, 0x5C, 0x20, 0x7C, 0x00, 0xF1, 0x87, 0x98, 0x19, 0x86, 0xA8, 0x6E, 0x76,
    0x7E, 0xA9, 0x99, 0x88, 0x2D, 0x55, 0x7D, 0x9E, 0xB9, 0xA3, 0x8A, 0x22, 0x8A, 0x6E, 0x8A, 0x56,
    0x8A, 0x5E, 0x9F, 0xB1, 0x83, 0x06, 0x26, 0x46, 0x66, 0x0E, 0x2E, 0x4E, 0x6E, 0x9D, 0xB8, 0xAD,
    0x00, 0x2C, 0x54, 0x7C, 0xF2, 0xB1, 0x8C, 0xB4, 0x99, 0xB9, 0xA3, 0x2D, 0x55, 0x7D, 0x81, 0x91,
    0xAC, 0x38, 0xAD, 0x3A, 0xB5, 0x83, 0x91, 0xAC, 0x2D, 0xD9, 0x28, 0xD8, 0x4D, 0xD9, 0x48, 0xD8,
    0x6D, 0xD9, 0x68, 0xD8, 0x8C, 0x9D, 0xAE, 0x29, 0xD9, 0x04, 0xAE, 0xD8, 0x51, 0xD9, 0x04, 0xAE,
    0xD8, 0x79, 0xD9, 0x04, 0xD8, 0x81, 0xF3, 0x9D, 0xAD, 0x00, 0x8D, 0xAE, 0x19, 0x81, 0xAD, 0xD9,
    0x01, 0xD8, 0xF2, 0xAE, 0xDA, 0x26, 0xD8, 0x8E, 0x91, 0x29, 0x83, 0xA7, 0xD9, 0xAD, 0xAD, 0xAD,
    0xAD, 0xF3, 0x2A, 0xD8, 0xD8, 0xF1, 0xB0, 0xAC, 0x89, 0x91, 0x3E, 0x5E, 0x76, 0xF3, 0xAC, 0x2E,
    0x2E, 0xF1, 0xB1, 0x8C, 0x5A, 0x9C, 0xAC, 0x2C, 0x28, 0x28, 0x28, 0x9C, 0xAC, 0x30, 0x18, 0xA8,
    0x98, 0x81, 0x28, 0x34, 0x3C, 0x97, 0x24, 0xA7, 0x28, 0x34, 0x3C, 0x9C, 0x24, 0xF2, 0xB0, 0x89,
    0xAC, 0x91, 0x2C, 0x4C, 0x6C, 0x8A, 0x9B, 0x2D, 0xD9, 0xD8, 0xD8, 0x51, 0xD9, 0xD8, 0xD8, 0x79,

    // bank 7, 138 bytes (remainder)
    0xD9, 0xD8, 0xD8, 0xF1, 0x9E, 0x88, 0xA3, 0x31, 0xDA, 0xD8, 0xD8, 0x91, 0x2D, 0xD9, 0x28, 0xD8,
    0x4D, 0xD9, 0x48, 0xD8, 0x6D, 0xD9, 0x68, 0xD8, 0xB1, 0x83, 0x93, 0x35, 0x3D, 0x80, 0x25, 0xDA,
    0xD8, 0xD8, 0x85, 0x69, 0xDA, 0xD8, 0xD8, 0xB4, 0x93, 0x81, 0xA3, 0x28, 0x34, 0x3C, 0xF3, 0xAB,
    0x8B, 0xF8, 0xA3, 0x91, 0xB6, 0x09, 0xB4, 0xD9, 0xAB, 0xDE, 0xFA, 0xB0, 0x87, 0x9C, 0xB9, 0xA3,
    0xDD, 0xF1, 0xA3, 0xA3, 0xA3, 0xA3, 0x95, 0xF1, 0xA3, 0xA3, 0xA3, 0x9D, 0xF1, 0xA3, 0xA3, 0xA3,
    0xA3, 0xF2, 0xA3, 0xB4, 0x90, 0x80, 0xF2, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
    0xA3, 0xB2, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xB0, 0x87, 0xB5, 0x99, 0xF1, 0xA3, 0xA3, 0xA3,
    0x98, 0xF1, 0xA3, 0xA3, 0xA3, 0xA3, 0x97, 0xA3, 0xA3, 0xA3, 0xA3, 0xF3, 0x9B, 0xA3, 0xA3, 0xDC,
    0xB9, 0xA7, 0xF1, 0x26, 0x26, 0x26, 0xD8, 0xD8, 0xFF
};

// thanks to Noah Zerkin for piecing this stuff together!
const unsigned char dmpConfig[MPU6050_DMP_CONFIG_SIZE] PROGMEM = {
//  BANK    OFFSET  LENGTH  [DATA]
    0x03,   0x7B,   0x03,   0x4C, 0xCD, 0x6C,               // FCFG_1 inv_set_gyro_calibration
    0x03,   0xAB,   0x03,   0x36, 0x56, 0x76,               // FCFG_3 inv_set_gyro_calibration
    0x00,   0x68,   0x04,   0x02, 0xCB, 0x47, 0xA2,         // D_0_104 inv_set_gyro_calibration
    0x02,   0x18,   0x04,   0x00, 0x05, 0x8B, 0xC1,         // D_0_24 inv_set_gyro_calibration
    0x01,   0x0C,   0x04,   0x00, 0x00, 0x00, 0x00,         // D_1_152 inv_set_accel_calibration
    0x03,   0x7F,   0x06,   0x0C, 0xC9, 0x2C, 0x97, 0x97, 0x97, // FCFG_2 inv_set_accel_calibration
    0x03,   0x89,   0x03,   0x26, 0x46, 0x66,               // FCFG_7 inv_set_accel_calibration
    0x00,   0x6C,   0x02,   0x20, 0x00,                     // D_0_108 inv_set_accel_calibration
    //0x02,   0x40,   0x04,   0x00, 0x00, 0x00, 0x00,       // CPASS_MTX_00 inv_set_compass_calibration
    //0x02,   0x44,   0x04,   0x00, 0x00, 0x00, 0x00,       // CPASS_MTX_01
    //0x02,   0x48,   0x04,   0x00, 0x00, 0x00, 0x00,       // CPASS_MTX_02
    //0x02,   0x4C,   0x04,   0x00, 0x00, 0x00, 0x00,       // CPASS_MTX_10
    //0x02,   0x50,   0x04,   0x00, 0x00, 0x00, 0x00,       // CPASS_MTX_11
    //0x02,   0x54,   0x04,   0x00, 0x00, 0x00, 0x00,       // CPASS_MTX_12
    //0x02,   0x58,   0x04,   0x00, 0x00, 0x00, 0x00,       // CPASS_MTX_20
    //0x02,   0x5C,   0x04,   0x00, 0x00, 0x00, 0x00,       // CPASS_MTX_21
    //0x02,   0xBC,   0x04,   0x00, 0x00, 0x00, 0x00,       // CPASS_MTX_22
    0x01,   0xEC,   0x04,   0x00, 0x00, 0x40, 0x00,         // D_1_236 inv_apply_endian_accel
    0x03,   0x7F,   0x06,   0x0C, 0xC9, 0x2C, 0x97, 0x97, 0x97, // FCFG_2 inv_set_mpu_sensors
    0x04,   0x02,   0x03,   0x0D, 0x35, 0x5D,               // CFG_MOTION_BIAS inv_turn_on_bias_from_no_motion
    //0x04,   0x02,   0x03,   0x98, 0x98, 0x98,             // CFG_MOTION_BIAS inv_turn_off bias correction
    0x04,   0x09,   0x04,   0x87, 0x2D, 0x35, 0x3D,         // FCFG_5 inv_set_bias_update
    0x00,   0xA3,   0x01,   0x00,                           // D_0_163 inv_set_dead_zone
                 // SPECIAL 0x01 = enable interrupts
    0x00,   0x00,   0x00,   0x01, // SET INT_ENABLE at i=22, SPECIAL INSTRUCTION
    0x07,   0x86,   0x01,   0xFE,                           // CFG_6 inv_set_fifo_interupt
    0x07,   0x41,   0x05,   0xF1, 0x20, 0x28, 0x30, 0x38,   // CFG_8 inv_send_quaternion
    //0x07,   0x7E,   0x01,   0x30,                           // CFG_16 inv_set_footer
    0x07,   0x46,   0x01,   0x9A,                         // CFG_GYRO_SOURCE inv_send_gyro
    #if UseGyroFiFo==1
    0x07,   0x47,   0x04,   0xF1, 0x28, 0x30, 0x38,       // CFG_9 inv_send_gyro -> inv_construct3_fifo
    #endif // UseGyroFiFo
    #if UseAcceleroFiFo==1
    0x07,   0x6C,   0x04,   0xF1, 0x28, 0x30, 0x38,       // CFG_12 inv_send_accel -> inv_construct3_fifo
    #endif // UseAcceleroFiFo
    0x02,   0x16,   0x02,   0x00, 0x00                      // D_0_22 inv_set_fifo_rate // Original 0x01
    // DMP output frequency is calculated easily using this equation: (200Hz / (1 + value))
    // It is important to make sure the host processor can keep up with reading and processing
    // the FIFO output at the desired rate. Handling FIFO overflow cleanly is also a good idea.
};

const unsigned char dmpUpdates[MPU6050_DMP_UPDATES_SIZE] PROGMEM = {
    0x01,   0xB2,   0x02,   0xFF, 0xFF,
    0x01,   0x90,   0x04,   0x09, 0x23, 0xA1, 0x35,
    0x01,   0x6A,   0x02,   0x06, 0x00,
    0x01,   0x60,   0x08,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00,   0x60,   0x04,   0x40, 0x00, 0x00, 0x00,
    0x01,   0x62,   0x02,   0x00, 0x00,
    0x00,   0x60,   0x04,   0x00, 0x40, 0x00, 0x00
};

struct Quaternion
{   float   w,x,y,z;
};

class myDMP:public MPU6050
{   public:
        void    Start()     { myFlag.ImuStart = true; };
        void    Stop()      { myFlag.ImuStart = false; };
        uint8_t Init (void);
        uint8_t InitDMP (void);
        float   getRoll();
        float   getPitch();
        float   getYaw();
        void    dmpGetQuaternion16Bit();
        void    dmpGetQuaternion32Bit();


        uint8_t FifoBuffer[JumlahFiFo+2];     // lihat definisi di bagian atas
        #if UseGyroFiFo==1
        void    dmpGetGyroData();
        int16_t Gx, Gy, Gz;
        #endif // UseGyroFiFo

        #if UseAcceleroFiFo
        void    dmpGetAcceleroData();
        int16_t Ax, Ay, Az;
        #endif // UseGyroFiFo
        //uint8_t dmpPacketSize;
        Quaternion  q;
private:
        float   DoubleInvMag2;
}imu;


void    myDMP::dmpGetQuaternion16Bit()
{   Data16Bit x;
    x.d8u[1] = FifoBuffer[0];        x.d8u[0] = FifoBuffer[1];
    q.w = (float)x.d16s * 0.00006103515625F;
    x.d8u[1] = FifoBuffer[4];        x.d8u[0] = FifoBuffer[5];
    q.x = (float)x.d16s * 0.00006103515625F;
    x.d8u[1] = FifoBuffer[8];        x.d8u[0] = FifoBuffer[9];
    q.y = (float)x.d16s * 0.00006103515625F;
    x.d8u[1] = FifoBuffer[12];       x.d8u[0] = FifoBuffer[13];
    q.z = (float)x.d16s * 0.00006103515625F;
    DoubleInvMag2 = 2.0F / (q.w*q.w + q.x*q.x + q.y*q.y + q.z*q.z);
}

void    myDMP::dmpGetQuaternion32Bit()
{   Data32Bit x;
    x.d8u[3] = FifoBuffer[0];        x.d8u[2] = FifoBuffer[1];
    x.d8u[1] = FifoBuffer[2];        x.d8u[0] = FifoBuffer[3];
    q.w = (float)x.d32s * 0.000000000931322574615478515625F;
    x.d8u[3] = FifoBuffer[4];        x.d8u[2] = FifoBuffer[5];
    x.d8u[1] = FifoBuffer[6];        x.d8u[0] = FifoBuffer[7];
    q.x = (float)x.d32s * 0.000000000931322574615478515625F;
    x.d8u[3] = FifoBuffer[8];        x.d8u[2] = FifoBuffer[9];
    x.d8u[1] = FifoBuffer[10];       x.d8u[0] = FifoBuffer[11];
    q.y = (float)x.d32s * 0.000000000931322574615478515625F;
    x.d8u[3] = FifoBuffer[12];       x.d8u[2] = FifoBuffer[13];
    x.d8u[1] = FifoBuffer[14];       x.d8u[0] = FifoBuffer[15];
    q.z = (float)x.d32s * 0.000000000931322574615478515625F;
    DoubleInvMag2 = 2.0F / (q.w*q.w + q.x*q.x + q.y*q.y + q.z*q.z);
}

#if UseGyroFiFo==1
void    myDMP::dmpGetGyroData()
{   Data16Bit   x;
    //x.d8u[3] = FifoBuffer[16];       x.d8u[2] = FifoBuffer[17];     x.d8u[1] = FifoBuffer[18];       x.d8u[0] = FifoBuffer[19];
    x.d8u[1] = FifoBuffer[16];       x.d8u[0] = FifoBuffer[17];
    Gx = x.d16s;
    //x.d8u[3] = FifoBuffer[20];       x.d8u[2] = FifoBuffer[21];     x.d8u[1] = FifoBuffer[22];       x.d8u[0] = FifoBuffer[23];
    x.d8u[1] = FifoBuffer[20];       x.d8u[0] = FifoBuffer[21];
    Gy = x.d16s;
    //x.d8u[3] = FifoBuffer[24];       x.d8u[2] = FifoBuffer[25];     x.d8u[1] = FifoBuffer[26];       x.d8u[0] = FifoBuffer[27];
    x.d8u[1] = FifoBuffer[24];       x.d8u[0] = FifoBuffer[25];
    Gz = x.d16s;
}
#endif // UseGyroFiFo

#if UseAcceleroFiFo == 1
void    myDMP::dmpGetAcceleroData()
{   Data16Bit   x;
    #if UseGyroFiFo==1
    //x.d8u[3] = FifoBuffer[28];       x.d8u[2] = FifoBuffer[29];     x.d8u[1] = FifoBuffer[30];       x.d8u[0] = FifoBuffer[31];
    x.d8u[1] = FifoBuffer[28];       x.d8u[0] = FifoBuffer[29];
    Ax = x.d16s;
    //x.d8u[3] = FifoBuffer[32];       x.d8u[2] = FifoBuffer[33];     x.d8u[1] = FifoBuffer[34];       x.d8u[0] = FifoBuffer[35];
    x.d8u[1] = FifoBuffer[32];       x.d8u[0] = FifoBuffer[33];
    Ay = x.d16s;
    //x.d8u[3] = FifoBuffer[36];       x.d8u[2] = FifoBuffer[37];     x.d8u[1] = FifoBuffer[38];       x.d8u[0] = FifoBuffer[39];
    x.d8u[1] = FifoBuffer[36];       x.d8u[0] = FifoBuffer[37];
    Az = x.d16s;
    #else
    //x.d8u[3] = FifoBuffer[16];       x.d8u[2] = FifoBuffer[17];     x.d8u[1] = FifoBuffer[18];       x.d8u[0] = FifoBuffer[19];
    x.d8u[1] = FifoBuffer[16];       x.d8u[0] = FifoBuffer[17];
    Ax = x.d16s;
    //x.d8u[3] = FifoBuffer[20];       x.d8u[2] = FifoBuffer[21];     x.d8u[1] = FifoBuffer[22];       x.d8u[0] = FifoBuffer[23];
    x.d8u[1] = FifoBuffer[20];       x.d8u[0] = FifoBuffer[21];
    Ay = x.d16s;
    //x.d8u[3] = FifoBuffer[24];       x.d8u[2] = FifoBuffer[25];     x.d8u[1] = FifoBuffer[26];       x.d8u[0] = FifoBuffer[27];
    x.d8u[1] = FifoBuffer[24];       x.d8u[0] = FifoBuffer[25];
    Az = x.d16s;
    #endif // UseGyroFiFo
}
#endif // UseGyroFiFo


float   myDMP::getRoll()
{   return atan2(DoubleInvMag2*(q.y*q.z + q.w*q.x) , 1 - DoubleInvMag2*(q.w*q.w + q.z*q.z));  // phi
}

float   myDMP::getPitch()
{   //return  asin(DoubleInvMag2*(q.x*q.z - q.w*q.y));      // board tidur
    //return atan2(DoubleInvMag2*(q.w*q.y + q.x*q.z) , DoubleInvMag2*(-q.w*q.w + q.x*q.x + q.y*q.y - q.z*q.z)*0.5);  // phi
    return atan2(DoubleInvMag2*(q.w*q.y - q.x*q.z) , DoubleInvMag2*(-q.w*q.w + q.x*q.x + q.y*q.y - q.z*q.z)*0.5);  // phi
}

float   myDMP::getYaw()
{   float Yaw = atan2(DoubleInvMag2*(q.x*q.y - q.w*q.z) , 1 - DoubleInvMag2*(q.w*q.w + q.x*q.x));  // psi
    if  (Yaw<0) return  Yaw + DualPhi;
    else        return  Yaw;
}

uint8_t    myDMP::Init()
{   if(testConnection())
    {   initialize();
        return InitDMP();
    }
    else
    {   return false;
    }
}

uint8_t myDMP::InitDMP (void)
{
    reset();
    #if DMP_INIT_DEBUG==1
    lcd.HapusBaris(1);  lcd.Tulis(1, ">Reset MPU6050 <");
    #endif // DMP_INIT_DEBUG
    _delay_ms(30); // wait after reset

    setSleepEnabled(false);

    setMemoryBank(0x10, true, true);

    setMemoryStartAddress(0x06);
    //uint8_t hwRevision = readMemoryByte();
    setMemoryBank(0, false, false);

//    uint8_t otpValid = getOTPBankValid();

    setSlaveAddress(0, 0x7F);
    setI2CMasterModeEnabled(false);
    setSlaveAddress(0, 0x68);
    resetI2CMaster();
    _delay_ms(20);
if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
        #if DMP_INIT_DEBUG==1   //            0123456789012345
        lcd.HapusBaris(1);  lcd.TulisKiri(1, ">> DMP Memori OK");
        #endif // DMP_INIT_DEBUG

        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
            #if DMP_INIT_DEBUG==1   //            0123456789012345
            lcd.HapusBaris(1);  lcd.TulisKiri(1, ">> DMP Config OK");
            #endif // DMP_INIT_DEBUG

            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
            setIntEnabled(0x12);
            setRate(4); // 1khz / (1 + 4) = 200 Hz

            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);

            setDLPFMode(MPU6050_DLPF_BW_42);

            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);

            setDMPConfig1(0x03);
            setDMPConfig2(0x00);

            setOTPBankValid(false);

            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
            #if DMP_INIT_DEBUG==1   //            0123456789012345
            lcd.HapusBaris(1);  lcd.TulisKiri(1, "1.Tulis Bank 1/7");
            #endif // DMP_INIT_DEBUG
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);

            //DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            #if DMP_INIT_DEBUG==1   //            0123456789012345
            lcd.HapusBaris(1);  lcd.TulisKiri(1, "2.Tulis Bank 2/7");
            #endif // DMP_INIT_DEBUG
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);

            resetFIFO();

            uint16_t fifoCount = getFIFOCount();

            setMotionDetectionThreshold(2);
            setZeroMotionDetectionThreshold(156);
            setMotionDetectionDuration(80);
            setZeroMotionDetectionDuration(0);

            resetFIFO();

            setFIFOEnabled(true);

            setDMPEnabled(true);

            resetDMP();

            #if DMP_INIT_DEBUG==1   //            0123456789012345
            lcd.HapusBaris(1);  lcd.TulisKiri(1, "3.Tulis Bank 3/7");
            #endif // DMP_INIT_DEBUG
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);

            #if DMP_INIT_DEBUG==1   //            0123456789012345
            lcd.HapusBaris(1);  lcd.TulisKiri(1, "4.Tulis Bank 4/7");
            #endif // DMP_INIT_DEBUG
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);

            #if DMP_INIT_DEBUG==1   //            0123456789012345
            lcd.HapusBaris(1);  lcd.TulisKiri(1, "5.Tulis Bank 5/7");
            #endif // DMP_INIT_DEBUG
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);

            while ((fifoCount = getFIFOCount()) < 3);

            #if DMP_INIT_DEBUG==1   //            0123456789012345
            lcd.HapusBaris(1);  lcd.TulisKiri(1, "6.Tulis Bank 6/7");
            #endif // DMP_INIT_DEBUG
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);

            while ((fifoCount = getFIFOCount()) < 3);

            #if DMP_INIT_DEBUG==1   //            0123456789012345
            lcd.HapusBaris(1);  lcd.TulisKiri(1, "7.Tulis Bank 7/7");
            #endif // DMP_INIT_DEBUG
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);

            setDMPEnabled(false);
            resetFIFO();
            //getIntStatus();
        } else {
            //ERROR! DMP configuration verification failed
            return false; // configuration block loading failed
        }
    } else {
        //ERROR! DMP code verification failed.
        return false; // main binary block loading failed
    }
    //                                    0123456789012345
    lcd.HapusBaris(1);  lcd.TulisKiri(1, "Init DMP Selesai");
    return true; // success
}




#endif // MYIMU_DMP_H_INCLUDED
