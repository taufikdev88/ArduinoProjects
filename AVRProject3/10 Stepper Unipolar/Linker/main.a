;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/28/2019
;Author  : unknown
;Company :
;Comments:
;
;
;Chip type               : ATmega8535
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;void stepper(unsigned int step,char cw, unsigned int del){
; 0000 001C void stepper(unsigned int step,char cw, unsigned int del){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001D     static unsigned int i = 0;
; 0000 001E     static unsigned char data = 0xCC;

	.DSEG

	.CSEG
; 0000 001F     static unsigned char temp = 0;
; 0000 0020 
; 0000 0021     for(i = 0; i < step; i++){
;PCODE: $0000000F VOL: 0
;	step -> Y+3
;	cw -> Y+2
;	del -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0022       if(cw == 0){
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0023         PORTB = (data >> temp) | (data << (8 - temp)) ;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0024       } else if (cw == 1){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0025         PORTB = (data << temp) | (data >> (8 - temp));
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0026       } else {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0027         return;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0028       }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0029 
; 0000 002A       if(++temp > 7){
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 002B         temp = 0;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 002C       }
; 0000 002D       delay_ms(del);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 002E     }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 002F }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;
;long map(long x, long in_min, long in_max, long out_min, long out_max){
; 0000 0031 long map(long x, long in_min, long in_max, long out_min, long out_max){
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0032     return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
;PCODE: $00000056 VOL: 0
;	x -> Y+16
;	in_min -> Y+12
;	in_max -> Y+8
;	out_min -> Y+4
;	out_max -> Y+0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0033 }
;PCODE: $0000006A VOL: 0
;
;void main(void)
; 0000 0036 {
;PCODE: $0000006B VOL: 0
; 0000 0037 // Declare your local variables here
; 0000 0038 
; 0000 0039 // Input/Output Ports initialization
; 0000 003A // Port A initialization
; 0000 003B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003D PORTA=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 003E DDRA=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 003F 
; 0000 0040 // Port B initialization
; 0000 0041 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0042 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0043 PORTB=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0044 DDRB=0xFF;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0045 
; 0000 0046 // Port C initialization
; 0000 0047 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0048 // State7=P State6=P State5=P State4=P State3=P State2=P State1=P State0=P
; 0000 0049 PORTC=0xFF;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 004A DDRC=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 004B 
; 0000 004C // Port D initialization
; 0000 004D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004F PORTD=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0050 DDRD=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0051 
; 0000 0052 // Timer/Counter 0 initialization
; 0000 0053 // Clock source: System Clock
; 0000 0054 // Clock value: Timer 0 Stopped
; 0000 0055 // Mode: Normal top=0xFF
; 0000 0056 // OC0 output: Disconnected
; 0000 0057 TCCR0=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0058 TCNT0=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0059 OCR0=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 005A 
; 0000 005B // Timer/Counter 1 initialization
; 0000 005C // Clock source: System Clock
; 0000 005D // Clock value: Timer1 Stopped
; 0000 005E // Mode: Normal top=0xFFFF
; 0000 005F // OC1A output: Discon.
; 0000 0060 // OC1B output: Discon.
; 0000 0061 // Noise Canceler: Off
; 0000 0062 // Input Capture on Falling Edge
; 0000 0063 // Timer1 Overflow Interrupt: Off
; 0000 0064 // Input Capture Interrupt: Off
; 0000 0065 // Compare A Match Interrupt: Off
; 0000 0066 // Compare B Match Interrupt: Off
; 0000 0067 TCCR1A=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0068 TCCR1B=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0069 TCNT1H=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 006A TCNT1L=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006B ICR1H=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006C ICR1L=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 006D OCR1AH=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 006E OCR1AL=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 006F OCR1BH=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0070 OCR1BL=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0071 
; 0000 0072 // Timer/Counter 2 initialization
; 0000 0073 // Clock source: System Clock
; 0000 0074 // Clock value: Timer2 Stopped
; 0000 0075 // Mode: Normal top=0xFF
; 0000 0076 // OC2 output: Disconnected
; 0000 0077 ASSR=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0078 TCCR2=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0079 TCNT2=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 007A OCR2=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 007B 
; 0000 007C // External Interrupt(s) initialization
; 0000 007D // INT0: Off
; 0000 007E // INT1: Off
; 0000 007F // INT2: Off
; 0000 0080 MCUCR=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0081 MCUCSR=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0082 
; 0000 0083 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0084 TIMSK=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0085 
; 0000 0086 // USART initialization
; 0000 0087 // USART disabled
; 0000 0088 UCSRB=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0089 
; 0000 008A // Analog Comparator initialization
; 0000 008B // Analog Comparator: Off
; 0000 008C // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 008D ACSR=0x80;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 008E SFIOR=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008F 
; 0000 0090 // ADC initialization
; 0000 0091 // ADC disabled
; 0000 0092 ADCSRA=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0093 
; 0000 0094 // SPI initialization
; 0000 0095 // SPI disabled
; 0000 0096 SPCR=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0097 
; 0000 0098 // TWI initialization
; 0000 0099 // TWI disabled
; 0000 009A TWCR=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 009B 
; 0000 009C while (1)
;PCODE: $000000B0 VOL: 0
; 0000 009D       {
; 0000 009E       // Place your code here
; 0000 009F         if(~PINC != 0){
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00A0             stepper(1,PINC.7, map((~PINC & 0x0F),1,15,1000,2));
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00A1         } else {
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00A2             PORTB = 0;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00A3         }
;PCODE: $000000CE VOL: 0
; 0000 00A4       }
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00A5 }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
